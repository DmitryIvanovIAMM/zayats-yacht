name: CI Next.js

on:
  push:
    branches: ["master"]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-deps.outputs.cache-primary-key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
          else
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ steps.detect-package-manager.outputs.manager }}-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Build Next.js
        run: npm run build

      - name: Upload .next build
        uses: actions/upload-artifact@v4
        with:
          name: next-build
          path: .next

  unit-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.build.outputs.cache-key }}

      - name: Download .next build
        uses: actions/download-artifact@v4
        with:
          name: next-build
          path: .next

      - name: Run Jest tests
        run: npm run test

  e2e-tests:
    runs-on: ubuntu-latest
    needs: build
    services:
      mongodb:
        image: mongo:6
        ports:
          - 27019:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      APP_ENV: CI
      MONGODB_URI: mongodb://root:password@localhost:27019/test?authSource=admin
      AUTH_SECRET: ZAYATS-YACHT-SECRET
      NEXTAUTH_SECRET: ZAYATS-YACHT-SECRET
      NEXTAUTH_URL: http://localhost:3000/api/auth
      SEND_EMAIL: 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.build.outputs.cache-key }}

      - name: Download .next build
        uses: actions/download-artifact@v4
        with:
          name: next-build
          path: .next

      - name: Start Next.js
        run: |
          npm run start &
          npx wait-on http://localhost:3000

      - name: Run Cypress tests
        run: npm run e2e
